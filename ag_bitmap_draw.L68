00002000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/4/2023 12:29:58 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Bitmap Subroutine
00000000                             3  * Written by : Ben Cohen    
00000000                             4  * Date       : 9/25/2023
00000000                             5  * Description: Bit mapping dawg
00000000                             6  * a0 = Pointer to bmp file
00000000                             7  * d2 = Left,Top Corner of bitmap chunk => High.w = Left, Low.W = Top
00000000                             8  * d3 = Width/Height of bitmap chunk => High.w = Width, Low.W = Height
00000000                             9  * d4 = Left,Top Corner of output display to display bitmap chunk => High.w = Left, Low.w = Top
00000000                            10  
00000000                            11  
00000000                            12  *-----------------------------------------------------------
00000000                            13      
00000000                            14     
00000000                            15      ;NOTE: If chunk offset is at a width/height that exceeds the BMP, offset will be set to 0, respectively
00000000                            16      ;NOTE: If Chunk Size is larger in width and/or height, chunk size will be set to the respective max value of the BMP minus the chunk offset
00000000                            17      ;NOTE: Having all inputs be 0, in accordance, will result in printing the entire BMP
00000000                            18      
00000000                            19      
00000000  =00000000                 20  Full_Image_Width    EQU     0
00000000  =00000002                 21  Full_Image_Height   EQU     2
00000000  =00000004                 22  Chunk_X_Offset      EQU     4
00000000  =00000006                 23  Chunk_Y_Offset      EQU     6
00000000  =00000008                 24  Chunk_Width         EQU     8
00000000  =0000000A                 25  Chunk_Height        EQU     10
00000000  =0000000C                 26  Output_X_Pos        EQU     12
00000000  =0000000E                 27  Output_Y_Pos        EQU     14
00000000                            28  
00000000  =0000000A                 29  BITMAP_IMAGE_DATA_OFFSET    EQU     10
00000000  =00000012                 30  BITMAP_WIDTH_OFFSET         EQU     18
00000000  =00000016                 31  BITMAP_HEIGHT_OFFSET        EQU     22
00000000  =0000001C                 32  BITMAP_BPP_OFFSET           EQU     28
00000000                            33  
00000000                            34  
00000000                            35  DrawBMP:
00000000                            36  
00000000  2448                      37      move.l  a0,a2                      ;For getting width and height
00000002  2004                      38      move.l  d4,d0                       ;Save user input here for now
00000004                            39      
00000004  0C50 424D                 40      cmp.w   #$424D,(a0)                   ;Check to see if file is BMP
00000008  6600 0150                 41      BNE     EndNotBMP
0000000C                            42      
0000000C  0C28 0020 001C            43      cmp.b   #32,BITMAP_BPP_OFFSET(a0)     ;Check to see if BMP is 32-bit
00000012  6600 0152                 44      BNE     EndNot32Bit
00000016                            45      
00000016  2828 0012                 46      move.l  BITMAP_WIDTH_OFFSET(a0),d4                  ;width   
0000001A  4EB9 00000192             47      jsr     ConvertToBigEndian
00000020  2C04                      48      move.l  d4,d6
00000022  BCBC 00000000             49      cmp.l   #0,d6
00000028  6700 012A                 50      BEQ     End                         ;MAke sure image width isnt zero
0000002C                            51      
0000002C  2828 0016                 52      move.l  BITMAP_HEIGHT_OFFSET(a0),d4                   ;Height
00000030  4EB9 00000192             53      jsr     ConvertToBigEndian
00000036  2E04                      54      move.l  d4,d7  
00000038  BEBC 00000000             55      cmp.l   #0,d7
0000003E  6700 0114                 56      BEQ     End                         ;Make sure image height isnt zero
00000042                            57      
00000042  2800                      58      move.l  d0,d4                       ;Move user input back into d4 UNCOMMENT IF NEEDED
00000044                            59      
00000044                            60      
00000044                            61      ;Get d1 to store max image size
00000044  4281                      62      clr.l   d1
00000046  3206                      63      move.w  d6,d1
00000048  4841                      64      swap    d1
0000004A  3207                      65      move.w  d7,d1
0000004C                            66      
0000004C  48E7 7800                 67      movem.l D1-D4,-(sp)                 ;Move vals to stack then 
00000050                            68      
00000050                            69      ;Check that offset does not extend past max image size (does it? Set to 0)
00000050  4281                      70      clr.l   d1
00000052  4284                      71      clr.l   d4
00000054                            72  
00000054                            73  CheckForZeroChunkX:
00000054                            74  
00000054  0C6F 0000 0008            75      cmp.w   #0,Chunk_Width(sp)
0000005A  6600 0008                 76      BNE     CheckForZeroChunkY
0000005E  3F6F 0000 0008            77      move.w  Full_Image_Width(sp),Chunk_Width(sp)
00000064                            78      
00000064                            79  CheckForZeroChunkY:
00000064  0C6F 0000 000A            80      cmp.w   #0,Chunk_Height(sp)
0000006A  6600 0008                 81      BNE     CheckChunkXOffset
0000006E  3F6F 0002 000A            82      move.w  Full_Image_Height(sp),Chunk_Height(sp)
00000074                            83  
00000074                            84  
00000074                            85  CheckChunkXOffset:
00000074                            86      
00000074  322F 0000                 87      move.w  Full_Image_Width(sp),d1
00000078  382F 0004                 88      move.w  Chunk_X_Offset(sp),d4
0000007C  B284                      89      cmp.l   d4,d1
0000007E  6E00 0008                 90      BGT     CheckChunkYOffset
00000082                            91  
00000082  3F7C 0000 0004            92      move.w  #0,Chunk_X_Offset(sp)
00000088                            93  
00000088                            94  CheckChunkYOffset:
00000088                            95  
00000088  322F 0002                 96      move.w  Full_Image_Height(sp),d1
0000008C  382F 0006                 97      move.w  Chunk_Y_Offset(sp),d4
00000090  B284                      98      cmp.l   d4,d1
00000092  6E00 0008                 99      BGT     CheckWidth
00000096                           100  
00000096  3F7C 0000 0006           101      move.w  #0,Chunk_Y_Offset(sp)
0000009C                           102      
0000009C                           103  CheckWidth:    
0000009C                           104      ;Check that chunk size is not larger than picture    
0000009C  322F 0000                105      move.w  Full_Image_Width(sp),d1
000000A0  926F 0004                106      sub.w   Chunk_X_Offset(sp),d1    
000000A4  382F 0008                107      move.w  Chunk_Width(sp),d4
000000A8  B284                     108      cmp.l   d4,d1
000000AA                           109      
000000AA  6C00 0006                110      BGE     CheckHeight
000000AE                           111      
000000AE  3F41 0008                112      move.w  d1,Chunk_Width(sp)  ;Set max size minus offset as chunk size
000000B2                           113          
000000B2                           114  CheckHeight:
000000B2                           115  
000000B2  322F 0002                116      move.w  Full_Image_Height(sp),d1
000000B6  926F 0006                117      sub.w   Chunk_Y_Offset(sp),d1
000000BA  382F 000A                118      move.w  Chunk_Height(sp),d4
000000BE  B284                     119      cmp.l   d4,d1
000000C0  6C00 0006                120      BGE     SetOutputScreen
000000C4                           121      
000000C4  3F41 000A                122      move.w  d1,Chunk_Height(sp)  ;Set max size minus offset as chunk size
000000C8                           123  
000000C8                           124  
000000C8                           125  SetOutputScreen:
000000C8                           126      
000000C8                           127      ;SETTING OUTPUT SCREEN SIZE TO DISPLAY JUST ENOUGH   
000000C8  4281                     128      clr.l   d1
000000CA  322F 000C                129      move.w  Output_X_Pos(sp),d1
000000CE  D26F 0008                130      add.w   Chunk_Width(sp),d1
000000D2  4841                     131      swap    d1
000000D4  322F 000E                132      move.w  Output_Y_Pos(sp),d1
000000D8  D26F 000A                133      add.w   Chunk_Height(sp),d1
000000DC                           134      
000000DC  7021                     135      move.l  #33,d0
000000DE                           136      ;TRAP    #15
000000DE                           137      
000000DE                           138     
000000DE                           139      
000000DE                           140  
000000DE  2248                     141      move.l  a0,a1
000000E0  1028 000A                142      move.b  BITMAP_IMAGE_DATA_OFFSET(a0),d0
000000E4  D3C0                     143      add.l   d0,a1                               ;Move image data start to a1 address
000000E6                           144      
000000E6                           145      
000000E6                           146      ;clear iterator registers
000000E6  4286                     147      clr.l   d6
000000E8  4287                     148      clr.l   d7
000000EA                           149      
000000EA  3E2F 000A                150      move.w  Chunk_Height(sp),d7         ;Set max height of chunk
000000EE                           151      
000000EE                           152      
000000EE                           153      ;d0 store x and d1 store y of chunk start
000000EE  4280                     154      clr.l   d0
000000F0  4281                     155      clr.l   d1
000000F2  4283                     156      clr.l   d3
000000F4                           157      
000000F4                           158      ;To Find the actual height for d7
000000F4                           159      
000000F4  322F 0002                160      move.w  Full_Image_Height(sp),d1    ;Move max image height to d1
000000F8  926F 0006                161      sub.w   Chunk_Y_Offset(sp),d1       ;remove chunk offset from d1
000000FC  926F 000A                162      sub.w   Chunk_Height(sp),d1         ;remove chunk height size from d1
00000100                           163  
00000100                           164      
00000100  C2EF 0000                165      mulu.w  Full_Image_Width(sp),d1     ;multiply max width by true height and assign to d1
00000104  E589                     166      lsl.l   #02,d1                      ;Multiple by 4 to get from long to bytes (shift left 2 bits is the same)   
00000106  D3C1                     167      add.l   d1,a1                       ;add height(y) offset to a1
00000108  2649                     168      move.l  a1,a3                       ;store start of data to a3 and a3 will increment by width + offset when called
0000010A                           169      
0000010A  4281                     170      clr.l   d1
0000010C  322F 0004                171      move.w  Chunk_X_Offset(sp),d1       ;get x offset
00000110  C2FC 0004                172      mulu.w  #04,d1                      ;get x offset bytes
00000114  D3C1                     173      add.l   d1,a1                       ;added the offset to a1
00000116  244F                     174      move.l  sp,a2                       ;save current stack pointer to a2
00000118                           175      
00000118                           176  
00000118                           177  BasicDraw:
00000118                           178      
00000118                           179      
00000118  2819                     180      move.l  (a1)+,d4                    ;Get pixel data at a1 then increment
0000011A                           181      
0000011A  4EB9 0000019A            182      jsr     ConvertToBGR
00000120                           183    
00000120  2204                     184      move.l  d4,d1                       ;Set Pen Color
00000122  7050                     185      move.l  #80,d0
00000124  4E4F                     186      TRAP #15
00000126                           187      
00000126                           188      ;color pixel (requires output coordinate mapping)
00000126  2206                     189      move.l  d6,d1                       ;move current x val to output x
00000128  D26F 000C                190      add.w   Output_X_Pos(sp),d1             ;add in the user define output offset for X
0000012C  2407                     191      move.l  d7,d2                       ;move current y val to output y
0000012E  D46F 000E                192      add.w   Output_Y_Pos(sp),d2             ;add the user defined output offset for Y
00000132  5342                     193      sub.w   #01,d2                      ;Minus 1 to output to account for max size
00000134  7052                     194      move.l  #82,d0
00000136  4E4F                     195      TRAP #15
00000138                           196      
00000138                           197      ;increment width iterator value
00000138  5286                     198      add.l   #01,d6
0000013A                           199      
0000013A  4281                     200      clr.l   d1
0000013C  322F 0008                201      move.w  Chunk_Width(sp),d1      ;Move chunk width to d1
00000140  BC81                     202      cmp.l   d1,d6                   ;We at width of chunk?
00000142  66D4                     203      BNE     BasicDraw
00000144                           204      
00000144                           205      
00000144                           206  CheckIfEnd:
00000144  4281                     207      clr.l   d1
00000146  BE81                     208      cmp.l   d1,d7       ;If the height = 0, we are done since current height = final height of chunk
00000148  6700 000A                209      BEQ     End
0000014C  4EB9 00000172            210      jsr     NextRow
00000152  66C4                     211      BNE     BasicDraw   ;Branch to draw again
00000154                           212      
00000154                           213  End:  
00000154  4CDF 001E                214      movem.l (sp)+,D1-D4
00000158  4E75                     215      rts
0000015A                           216      
0000015A                           217  EndNotBMP:
0000015A                           218      ;Print not a bmp to screen
0000015A  700D                     219      move.l  #13,d0
0000015C  43F9 0000019E            220      lea     NotBMP,a1
00000162  4E4F                     221      TRAP #15
00000164  4E75                     222      rts
00000166                           223      
00000166                           224  EndNot32Bit:
00000166                           225      ;Print not 32 bit to screen
00000166  700D                     226      move.l  #13,d0
00000168  43F9 000001B0            227      lea     Not32Bit,a1
0000016E  4E4F                     228      TRAP #15
00000170  4E75                     229      rts
00000172                           230  
00000172                           231  
00000172                           232  NextRow:
00000172  4286                     233      clr.l   d6
00000174  4281                     234      clr.l   d1
00000176  4282                     235      clr.l   d2
00000178                           236      
00000178  5283                     237      add.l   #01,d3                      ;REMOVE LATER IF NOT USED
0000017A                           238      
0000017A                           239      ;go to next row offset
0000017A  322A 0000                240      move.w  Full_Image_Width(a2),d1     ;Move full image width to d1
0000017E  E589                     241      lsl.l   #02,d1                      ;Multiple by 4 to get from long to bytes  
00000180  D7C1                     242      add.l   d1,a3                       ;add this increment to a3 (the row holder)   
00000182  224B                     243      move.l  a3,a1                       ;give increment to a1
00000184                           244      
00000184  342A 0004                245      move.w  Chunk_X_Offset(a2),d2       ;add width offset (long) to d2
00000188  C4FC 0004                246      mulu.w   #04,d2                     ;get width offset in bytes
0000018C  D3C2                     247      add.l   d2,a1                       ;add to a1    
0000018E  5387                     248      sub.l   #01,d7                      ;decrease current height count
00000190  4E75                     249      rts
00000192                           250      
00000192                           251  ConvertToBigEndian:
00000192                           252  
00000192  E15C                     253      rol.w   #$08,d4
00000194  4844                     254      swap    d4
00000196  E15C                     255      rol.w   #$08,d4
00000198                           256      ;move.b  d4,d5
00000198                           257      ;lsr.l   #$08,d4
00000198                           258      ;lsl.l   #$08,d5
00000198                           259      ;move.b  d4,d5
00000198                           260      ;lsr.l   #$08,d4
00000198                           261      ;lsl.l   #$08,d5
00000198                           262      ;move.b  d4,d5
00000198                           263      ;lsr.l   #$08,d4
00000198                           264      ;lsl.l   #$08,d5
00000198                           265      ;move.b  d4,d5
00000198                           266      ;move.l  d5,d4
00000198  4E75                     267      rts
0000019A                           268      
0000019A                           269  ConvertToBGR:   
0000019A                           270      
0000019A  E08C                     271      lsr.l   #$08,d4
0000019C                           272      
0000019C                           273      ;move.b  d4,d5
0000019C                           274      ;lsr.l   #$08,d4
0000019C                           275      ;swap    d5
0000019C                           276      ;lsl.l   #$08,d5
0000019C                           277      ;add.l  d5,d4
0000019C                           278      
0000019C  4E75                     279      rts
0000019E                           280      
0000019E                           281          
0000019E                           282     
0000019E= 46 69 6C 65 20 6E ...    283  NotBMP  dc.b    'File not a Bitmap',0
000001B0= 42 4D 50 20 69 73 ...    284  Not32Bit    dc.b    'BMP is not in 32-bit format',0
000001CC                           285  
000001CC                           286  
000001CC                           287  ;END OF DrawBMP Subroutine
000001CC                           288  
000001CC                           289  
000001CC  4E72 1000                290          STOP    #$1000
000001D0                           291     
00002000                           292  START   ORG    $2000                  ; first instruction of program
00002000                           293  
00002000                           294  * Put program code here
00002000                           295      
00002000                           296      
00002000                           297      ;TESTING CASES
00002000                           298      
00002000                           299      ;Chunk Offset
00002000                           300      ;move.l  #$00FA01C2,d2   ;Bitmap chunk start at 250,450
00002000                           301      ;move.l  #$00000000,d2   ;Bitmap chunk start at 0,0
00002000                           302      ;move.l  #$006400C8,d2   ;Bitmap chunk start at 100,200
00002000                           303      ;move.l  #$00320048,d2   ;Bitmap chunk start at 50,75
00002000                           304      ;move.l  #$FFFFFFFF,d2    ;Bitmap chunk start at Max,Max
00002000                           305      
00002000                           306  
00002000                           307      
00002000  41F9 00002038            308      lea     Bitmap, a0
00002006  243C 00FA01C2            309      move.l  #$00FA01C2,d2   ;Bitmap chunk start at 250,450
0000200C  263C 00C8012C            310      move.l  #$00C8012C,d3   ;Chunk 200x300
00002012                           311      
00002012  4EB8 0000                312      jsr DrawBMP
00002016                           313      
00002016                           314      
00002016  41F9 00002038            315      lea     Bitmap, a0
0000201C  243C 006400C8            316      move.l  #$006400C8,d2   ;Bitmap chunk start at 100,200
00002022  263C 00640064            317      move.l  #$00640064,d3   ;Chunk 100x100
00002028  283C 006400FA            318      move.l  #$006400FA,d4   ;Output at 100,250
0000202E                           319  
0000202E  4EB8 0000                320      jsr DrawBMP
00002032                           321      
00002032                           322      
00002032                           323      
00002032                           324      ;Chunk Size
00002032                           325      ;move.l  #$00C8012C,d3   ;Chunk 200x300
00002032                           326      ;move.l  #$00640064,d3   ;Chunk 100x100
00002032                           327      ;move.l #$023A038F,d3    ;Chunk 570x911 W bmp size
00002032                           328      ;move.l  #$00D800F8,d3   ;Chunk 216x248 chen transparent size
00002032                           329      ;move.l  #$015E0190,d3   ;Chunk 350x400
00002032                           330      ;move.l  #$FFFFFFFF,d3   ;Max chunk possible
00002032                           331      
00002032                           332      ;Height chunk test
00002032                           333      ;move.l  #$000001c2,d2      ;Chunk bitmap chunk start at 0,450
00002032                           334      ;move.l  d1,d3
00002032                           335      ;move.w  #$012C,d3      ;Chunk height = 300
00002032                           336      
00002032                           337      ;side chunk test
00002032                           338      ;move.l  d1,d3
00002032                           339      ;swap    d3
00002032                           340      ;move.w  #$00C8, d3      ;Chunk is max height, but certain width
00002032                           341      ;swap    d3
00002032                           342      
00002032                           343      ;Output Offset Test
00002032                           344      ;move.l  #$006400FA,d4   ;Output at 100,250
00002032                           345      ;move.l  #$019601AF,d4   ;Output at 406,431
00002032                           346      ;clr.l   d4              ;Output at 0,0
00002032                           347      
00002032  7000                     348      move.l  #$0,d0
00002034                           349      
00002034                           350    
00002034                           351      
00002034                           352      
00002034                           353      
00002034                           354      
00002034                           355  
00002034                           356      
00002034                           357  
00002034                           358  
00002034                           359  
00002034                           360  
00002034  4E72 2000                361          STOP #$2000
00002038                           362  * Put variables and constants here
00002038                           363  
00002038                           364  
00002038                           365  Bitmap:  
00002038                           366      INCBIN  "test-32.bmp"    
00059A64                           367      ;INCBIN  "chen_transparent.bmp"
00059A64                           368      ;INCBIN  "asmdata.bin"
00059A64                           369      ;INCBIN  "mario_face.bmp"
00059A64                           370   
00059A64                           371  
00059A64                           372      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BASICDRAW           118
BITMAP              2038
BITMAP_BPP_OFFSET   1C
BITMAP_HEIGHT_OFFSET  16
BITMAP_IMAGE_DATA_OFFSET  A
BITMAP_WIDTH_OFFSET  12
CHECKCHUNKXOFFSET   74
CHECKCHUNKYOFFSET   88
CHECKFORZEROCHUNKX  54
CHECKFORZEROCHUNKY  64
CHECKHEIGHT         B2
CHECKIFEND          144
CHECKWIDTH          9C
CHUNK_HEIGHT        A
CHUNK_WIDTH         8
CHUNK_X_OFFSET      4
CHUNK_Y_OFFSET      6
CONVERTTOBGR        19A
CONVERTTOBIGENDIAN  192
DRAWBMP             0
END                 154
ENDNOT32BIT         166
ENDNOTBMP           15A
FULL_IMAGE_HEIGHT   2
FULL_IMAGE_WIDTH    0
NEXTROW             172
NOT32BIT            1B0
NOTBMP              19E
OUTPUT_X_POS        C
OUTPUT_Y_POS        E
SETOUTPUTSCREEN     C8
START               2000
